#include "device_driver.h"
#include <stdlib.h>

#define LCDW (320)
#define LCDH (240)
#define BULLET_MAX (5)
#define ENEMY_MAX (5)
#define TIMER_PERIOD (10)
#define AUTO_FIRE_INTERVAL (3)
#define BASE_TIME (100)

#define SKYBLUE (0x867F)

enum tones {C4, D4, E4, F4, G4, A4, B4, C5, D5, E5};
const static unsigned short tone_table[] = {261, 294, 330, 349, 392, 440, 494, 523};
const static unsigned char bgm_melody[][2] = {
    {C4, 1}, {E4, 1}, {G4, 1}, {C5, 1},
    {B4, 1}, {G4, 1}, {E4, 1}, {C4, 1},
    
    {D4, 1}, {F4, 1}, {A4, 1}, {D5, 1},
    {C5, 1}, {A4, 1}, {F4, 1}, {D4, 1},
    
    {E4, 1}, {G4, 1}, {B4, 1}, {E5, 1},
    {D5, 1}, {B4, 1}, {G4, 1}, {E4, 1},
    
    {C4, 2}, {D4, 2}, {G4, 2}, {C5, 2}
    
};
#define BGM_LENGTH (sizeof(bgm_melody)/sizeof(bgm_melody[0]))

extern volatile int TIM4_expired;
extern volatile int Jog_key_in;
extern volatile int Jog_key;

typedef struct {
    int x, y;
    int alive;
} Object;

typedef struct {
    int x, y;
    int alive;
    int speed;
    int pattern;
    int direction;
} Enemy;

Object dragon;
Object bullets[BULLET_MAX];
Enemy enemies[ENEMY_MAX];

int score = 0;
int life = 3;
int fire_timer = 0;
int i, j;
int game_over = 0;
int high_score = 0;

int bgm_index = 0;
int bgm_timer = 0;
int bgm_playing = 0;
int current_level = 1;

void BGM_Start(void) {
    bgm_index = 0;
    bgm_timer = 0;
    bgm_playing = 1;
}

void BGM_Stop(void) {
    bgm_playing = 0;
    TIM3_Out_Stop();
}

void BGM_Process(void) {
    if (!bgm_playing) return;
    if (bgm_timer <= 0) {
        if (bgm_melody[bgm_index][0] < sizeof(tone_table)/sizeof(tone_table[0])) {
            unsigned short freq = tone_table[bgm_melody[bgm_index][0]];
            TIM3_Out_Freq_Generation(freq);
        } else {
            TIM3_Out_Stop();
        }
        bgm_timer = (BASE_TIME * bgm_melody[bgm_index][1]) / 100;
        bgm_index++;
        if (bgm_index >= BGM_LENGTH)
            bgm_index = 0;
    } else {
        bgm_timer--;
    }
}

void Update_Level(void) {
    if (score >= 30) current_level = 4;
    else if (score >= 20) current_level = 3;
    else if (score >= 10) current_level = 2;
    else current_level = 1;
}

void System_Init(void) {
    Clock_Init();
    LED_Init();
    Key_Poll_Init();
    Uart1_Init(115200);
    SCB->VTOR = 0x08003000;
    SCB->SHCSR = 7 << 16;
    Lcd_Init(3);
    TIM3_Out_Init();
}

void Init_Game(void) {
    Lcd_Clr_Screen();
    dragon.x = LCDW / 2 - 10;
    dragon.y = LCDH - 30;
    dragon.alive = 1;
    for (i = 0; i < BULLET_MAX; i++) bullets[i].alive = 0;
    for (i = 0; i < ENEMY_MAX; i++) {
        enemies[i].x = rand() % (LCDW - 20);
        enemies[i].y = rand() % 100;
        enemies[i].alive = 1;
        enemies[i].speed = 2 + rand() % 3;
        enemies[i].pattern = rand() % 2;
        enemies[i].direction = (rand() % 2) ? 1 : -1;
    }
    score = 0;
    life = 3;
    fire_timer = 0;
    game_over = 0;
    current_level = 1;
    BGM_Start();
}

// Draw_Status(), Draw_Dragon(), Clear_Dragon(), Draw_Object(), Clear_Object(), Draw_Alien(), Clear_Alien() 등은 그대로 사용

void Move_Enemies(void) {
    for (i = 0; i < ENEMY_MAX; i++) {
        if (enemies[i].alive) {
            Clear_Alien(enemies[i].x, enemies[i].y);
            int speed_boost = current_level - 1;
            if (enemies[i].pattern == 0) {
                enemies[i].y += enemies[i].speed + speed_boost;
            } else {
                enemies[i].y += enemies[i].speed + speed_boost;
                enemies[i].x += enemies[i].direction * (2 + speed_boost);
                if (enemies[i].x <= 0 || enemies[i].x >= LCDW - 20)
                    enemies[i].direction *= -1;
            }
            if (enemies[i].y > LCDH - 20) {
                enemies[i].y = 0;
                enemies[i].x = rand() % (LCDW - 20);
                enemies[i].speed = 2 + rand() % 3;
                enemies[i].pattern = rand() % 2;
                enemies[i].direction = (rand() % 2) ? 1 : -1;
            }
        }
    }
}

void Draw_Status(void)
{
    Lcd_Printf(0, 0, WHITE, BLACK, 1, 1, "Score: %d", score);
    Lcd_Printf(100, 0, WHITE, BLACK, 1, 1, "High: %d", high_score);
    Lcd_Printf(200, 0, RED, BLACK, 1, 1, "Life: %d", life);
}

void Draw_Dragon(int x, int y)
{
    Lcd_Draw_Box(x + 8, y, 4, 20, BLUE);
    Lcd_Draw_Box(x, y + 5, 20, 4, SKYBLUE);
    Lcd_Draw_Box(x + 6, y + 15, 2, 5, WHITE);
    Lcd_Draw_Box(x + 12, y + 15, 2, 5, WHITE);

}

void Clear_Dragon(int x, int y)
{
    Lcd_Draw_Box(x + 8, y, 4, 20, BLACK);
    Lcd_Draw_Box(x, y + 5, 20, 4, BLACK);
    Lcd_Draw_Box(x + 6, y + 15, 2, 5, BLACK);
    Lcd_Draw_Box(x + 12, y + 15, 2, 5, BLACK);
}

void Draw_Object(int x, int y, int w, int h, unsigned short color)
{
    Lcd_Draw_Box(x, y, w, h, color);
}

void Clear_Object(int x, int y, int w, int h)
{
    Lcd_Draw_Box(x, y, w, h, BLACK);
}

void Draw_Alien(int x, int y)
{
    Lcd_Draw_Box(x + 4, y, 12, 12, GREEN); // 머리
    Lcd_Draw_Box(x + 6, y + 3, 2, 2, WHITE); // 왼쪽 눈
    Lcd_Draw_Box(x + 12, y + 3, 2, 2, WHITE); // 오른쪽 눈
    Lcd_Draw_Box(x + 6, y + 12, 8, 6, GREEN); // 몸통
    Lcd_Draw_Box(x, y + 10, 20, 2, GREEN); // 팔
}

void Clear_Alien(int x, int y)
{
    Lcd_Draw_Box(x + 4, y, 12, 12, BLACK);
    Lcd_Draw_Box(x + 6, y + 3, 2, 2, BLACK);
    Lcd_Draw_Box(x + 12, y + 3, 2, 2, BLACK);
    Lcd_Draw_Box(x + 6, y + 12, 8, 6, BLACK);
    Lcd_Draw_Box(x, y + 10, 20, 2, BLACK);
}

void Fire_Bullet(void)
{
    for (i = 0; i < BULLET_MAX; i++) {
        if (!bullets[i].alive) {
            bullets[i].x = dragon.x + 8;
            bullets[i].y = dragon.y - 10;
            bullets[i].alive = 1;
            break;
        }
    }
}

void Move_Bullets(void)
{
    for (i = 0; i < BULLET_MAX; i++) {
        if (bullets[i].alive) {
            Clear_Object(bullets[i].x, bullets[i].y, 3, 10);
            bullets[i].y -= 10;
            if (bullets[i].y < 0) {
                bullets[i].alive = 0;
                Clear_Object(bullets[i].x, 0, 3, 10);
            }
        }
    }
}

int Check_Collision(int ax, int ay, int aw, int ah, int bx, int by, int bw, int bh)
{
    return ax < bx + bw && ax + aw > bx &&
           ay < by + bh && ay + ah > by;
}

void Check_Hits(void)
{
    for (i = 0; i < BULLET_MAX; i++) {
        for (j = 0; j < ENEMY_MAX; j++) {
            if (bullets[i].alive && enemies[j].alive &&
                Check_Collision(bullets[i].x, bullets[i].y, 3, 10,
                                enemies[j].x, enemies[j].y, 20, 20)) {
                Clear_Alien(enemies[j].x, enemies[j].y);
                bullets[i].alive = 0;
                enemies[j].y = 0;
                enemies[j].x = rand() % (LCDW - 20);
                enemies[j].speed = 2 + rand() % 3;
                enemies[j].pattern = rand() % 2;
                enemies[j].direction = (rand() % 2) ? 1 : -1;
                score++;
            }
        }
    }

    for (j = 0; j < ENEMY_MAX; j++) {
        if (enemies[j].alive &&
            Check_Collision(dragon.x, dragon.y, 20, 20,
                            enemies[j].x, enemies[j].y, 20, 20)) {
            Clear_Alien(enemies[j].x, enemies[j].y);
            enemies[j].y = 0;
            enemies[j].x = rand() % (LCDW - 20);
            enemies[j].speed = 2 + rand() % 3;
            enemies[j].pattern = rand() % 2;
            enemies[j].direction = (rand() % 2) ? 1 : -1;
            life--;
            if (life <= 0) {
                if (score > high_score) high_score = score;
                Draw_Status();
                Lcd_Printf(100, 100, RED, BLACK, 2, 2, "GAME OVER");
                Lcd_Printf(80, 140, WHITE, BLACK, 1, 1, "Press BUTTON to Restart");
                game_over = 1;
                BGM_Stop();
            }
        }
    }
}

void Main(void) {
    System_Init();
    Jog_Poll_Init();
    Jog_ISR_Enable(1);
    Uart1_RX_Interrupt_Enable(1);
    Init_Game();
    Draw_Status();
    TIM4_Repeat_Interrupt_Enable(1, TIMER_PERIOD * 10);

    while (1) {
        if (Jog_key_in) {
            Jog_key_in = 0;
            if (!game_over) {
                Clear_Dragon(dragon.x, dragon.y);
                if (Jog_key == 0 && dragon.y > 0) dragon.y -= 10;
                else if (Jog_key == 1 && dragon.y < LCDH - 30) dragon.y += 10;
                else if (Jog_key == 2 && dragon.x > 0) dragon.x -= 10;
                else if (Jog_key == 3 && dragon.x < LCDW - 20) dragon.x += 10;
            } else if (Jog_key == 1) {
                Init_Game();
            }
        }

        if (TIM4_expired) {
            if (!game_over) {
                Update_Level();
                Draw_Status();
                Move_Bullets();
                Move_Enemies();
                Check_Hits();

                fire_timer++;
                if (fire_timer >= AUTO_FIRE_INTERVAL) {
                    Fire_Bullet();
                    fire_timer = 0;
                }

                Draw_Dragon(dragon.x, dragon.y);
                for (i = 0; i < BULLET_MAX; i++)
                    if (bullets[i].alive)
                        Draw_Object(bullets[i].x, bullets[i].y, 3, 10, YELLOW);
                for (i = 0; i < ENEMY_MAX; i++)
                    if (enemies[i].alive)
                        Draw_Alien(enemies[i].x, enemies[i].y);
            }
            BGM_Process();
            TIM4_expired = 0;
        }
    }
}
